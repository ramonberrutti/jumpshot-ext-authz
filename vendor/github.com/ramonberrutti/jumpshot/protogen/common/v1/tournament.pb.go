// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: common/v1/tournament.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tournament_ParticipantsMode int32

const (
	Tournament_TEAMS   Tournament_ParticipantsMode = 0
	Tournament_PLAYERS Tournament_ParticipantsMode = 1
)

// Enum value maps for Tournament_ParticipantsMode.
var (
	Tournament_ParticipantsMode_name = map[int32]string{
		0: "TEAMS",
		1: "PLAYERS",
	}
	Tournament_ParticipantsMode_value = map[string]int32{
		"TEAMS":   0,
		"PLAYERS": 1,
	}
)

func (x Tournament_ParticipantsMode) Enum() *Tournament_ParticipantsMode {
	p := new(Tournament_ParticipantsMode)
	*p = x
	return p
}

func (x Tournament_ParticipantsMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tournament_ParticipantsMode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_tournament_proto_enumTypes[0].Descriptor()
}

func (Tournament_ParticipantsMode) Type() protoreflect.EnumType {
	return &file_common_v1_tournament_proto_enumTypes[0]
}

func (x Tournament_ParticipantsMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tournament_ParticipantsMode.Descriptor instead.
func (Tournament_ParticipantsMode) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 0}
}

// State of the tournament.
type Tournament_State int32

const (
	// The tournament is created.
	Tournament_CREATED Tournament_State = 0
	// Waiting to open the tournament.
	Tournament_WAITING Tournament_State = 1
	// The tournament is open for registration.
	Tournament_JOIN_OPEN Tournament_State = 2
	// The tournament is closed for registration.
	Tournament_JOIN_CLOSED Tournament_State = 3
	// Checkin is open.
	Tournament_CHECKIN_OPEN Tournament_State = 4
	// Checkin is closed.
	Tournament_CHECKIN_CLOSED Tournament_State = 5
	// Configuring the tournament.
	Tournament_CONFIGURING Tournament_State = 6
	// The tournament is running.
	// In this state the phases have their own state.
	Tournament_RUNNING Tournament_State = 7
	// The tournament is finished.
	Tournament_FINISHED Tournament_State = 8
	// Archived.
	Tournament_ARCHIVED Tournament_State = 9
	// The tournament is canceled.
	Tournament_CANCELED Tournament_State = 10
)

// Enum value maps for Tournament_State.
var (
	Tournament_State_name = map[int32]string{
		0:  "CREATED",
		1:  "WAITING",
		2:  "JOIN_OPEN",
		3:  "JOIN_CLOSED",
		4:  "CHECKIN_OPEN",
		5:  "CHECKIN_CLOSED",
		6:  "CONFIGURING",
		7:  "RUNNING",
		8:  "FINISHED",
		9:  "ARCHIVED",
		10: "CANCELED",
	}
	Tournament_State_value = map[string]int32{
		"CREATED":        0,
		"WAITING":        1,
		"JOIN_OPEN":      2,
		"JOIN_CLOSED":    3,
		"CHECKIN_OPEN":   4,
		"CHECKIN_CLOSED": 5,
		"CONFIGURING":    6,
		"RUNNING":        7,
		"FINISHED":       8,
		"ARCHIVED":       9,
		"CANCELED":       10,
	}
)

func (x Tournament_State) Enum() *Tournament_State {
	p := new(Tournament_State)
	*p = x
	return p
}

func (x Tournament_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tournament_State) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_tournament_proto_enumTypes[1].Descriptor()
}

func (Tournament_State) Type() protoreflect.EnumType {
	return &file_common_v1_tournament_proto_enumTypes[1]
}

func (x Tournament_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tournament_State.Descriptor instead.
func (Tournament_State) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 1}
}

type TournamentMatch_State int32

const (
	// match is created.
	TournamentMatch_CREATED TournamentMatch_State = 0
	// match is voting.
	TournamentMatch_WAITING_VOTING TournamentMatch_State = 1
	TournamentMatch_VOTING         TournamentMatch_State = 2
	// match is ready to start.
	TournamentMatch_WAITING_READY TournamentMatch_State = 3
	TournamentMatch_READY         TournamentMatch_State = 4
	// match is configuring.
	TournamentMatch_CONFIGURING TournamentMatch_State = 5
	// match is running.
	TournamentMatch_RUNNING TournamentMatch_State = 6
	// match is finished.
	TournamentMatch_FINISHED TournamentMatch_State = 7
	// match is archived.
	TournamentMatch_ARCHIVED TournamentMatch_State = 8
	// match is canceled.
	TournamentMatch_CANCELED TournamentMatch_State = 9
)

// Enum value maps for TournamentMatch_State.
var (
	TournamentMatch_State_name = map[int32]string{
		0: "CREATED",
		1: "WAITING_VOTING",
		2: "VOTING",
		3: "WAITING_READY",
		4: "READY",
		5: "CONFIGURING",
		6: "RUNNING",
		7: "FINISHED",
		8: "ARCHIVED",
		9: "CANCELED",
	}
	TournamentMatch_State_value = map[string]int32{
		"CREATED":        0,
		"WAITING_VOTING": 1,
		"VOTING":         2,
		"WAITING_READY":  3,
		"READY":          4,
		"CONFIGURING":    5,
		"RUNNING":        6,
		"FINISHED":       7,
		"ARCHIVED":       8,
		"CANCELED":       9,
	}
)

func (x TournamentMatch_State) Enum() *TournamentMatch_State {
	p := new(TournamentMatch_State)
	*p = x
	return p
}

func (x TournamentMatch_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TournamentMatch_State) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_tournament_proto_enumTypes[2].Descriptor()
}

func (TournamentMatch_State) Type() protoreflect.EnumType {
	return &file_common_v1_tournament_proto_enumTypes[2]
}

func (x TournamentMatch_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TournamentMatch_State.Descriptor instead.
func (TournamentMatch_State) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{1, 0}
}

type Tournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Tournament) Reset() {
	*x = Tournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament) ProtoMessage() {}

func (x *Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament.ProtoReflect.Descriptor instead.
func (*Tournament) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0}
}

type TournamentMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TournamentMatch) Reset() {
	*x = TournamentMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMatch) ProtoMessage() {}

func (x *TournamentMatch) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMatch.ProtoReflect.Descriptor instead.
func (*TournamentMatch) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{1}
}

type Tournament_TeamsParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Tournament_TeamsParticipants_Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *Tournament_TeamsParticipants) Reset() {
	*x = Tournament_TeamsParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_TeamsParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_TeamsParticipants) ProtoMessage() {}

func (x *Tournament_TeamsParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_TeamsParticipants.ProtoReflect.Descriptor instead.
func (*Tournament_TeamsParticipants) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Tournament_TeamsParticipants) GetTeams() []*Tournament_TeamsParticipants_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type Tournament_PlayersParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*Tournament_PlayersParticipants_Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *Tournament_PlayersParticipants) Reset() {
	*x = Tournament_PlayersParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_PlayersParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_PlayersParticipants) ProtoMessage() {}

func (x *Tournament_PlayersParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_PlayersParticipants.ProtoReflect.Descriptor instead.
func (*Tournament_PlayersParticipants) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Tournament_PlayersParticipants) GetPlayers() []*Tournament_PlayersParticipants_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

// Phase contains the information of a phase of the tournament.
type Tournament_Phase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id for the phase.
	// for example: playoff, groups.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name that will be displayed.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// matches for this phase.
	Matches []*Tournament_Phase_Match `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
	// sub phases for this phase.
	Phases []*Tournament_Phase `protobuf:"bytes,4,rep,name=phases,proto3" json:"phases,omitempty"`
	// completed record if the phase is completed.
	Completed bool `protobuf:"varint,5,opt,name=completed,proto3" json:"completed,omitempty"`
	// wait_for previous phase to be completed before start this phase.
	WaitFor []string                        `protobuf:"bytes,6,rep,name=wait_for,json=waitFor,proto3" json:"wait_for,omitempty"`
	Config  *Tournament_Phase_Configuration `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *Tournament_Phase) Reset() {
	*x = Tournament_Phase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_Phase) ProtoMessage() {}

func (x *Tournament_Phase) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_Phase.ProtoReflect.Descriptor instead.
func (*Tournament_Phase) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Tournament_Phase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tournament_Phase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tournament_Phase) GetMatches() []*Tournament_Phase_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *Tournament_Phase) GetPhases() []*Tournament_Phase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *Tournament_Phase) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *Tournament_Phase) GetWaitFor() []string {
	if x != nil {
		return x.WaitFor
	}
	return nil
}

func (x *Tournament_Phase) GetConfig() *Tournament_Phase_Configuration {
	if x != nil {
		return x.Config
	}
	return nil
}

type Tournament_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max_participants is the maximum number of participants in the tournament.
	MaxParticipants uint32 `protobuf:"varint,1,opt,name=max_participants,json=maxParticipants,proto3" json:"max_participants,omitempty"`
	// join_time is the time that the tournament will be open for registration.
	JoinTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	// close_time is the time that the tournament will be closed for registration.
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	// checkin_time is the time before the tournament start that the checkin is open.
	// empty if the checkin is not required.
	CheckinTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=checkin_time,json=checkinTime,proto3" json:"checkin_time,omitempty"`
	// checkin_duration is the duration of the checkin.
	// empty if the checkin is not required.
	CheckinDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=checkin_duration,json=checkinDuration,proto3" json:"checkin_duration,omitempty"`
	// start_time is the time that the tournament will start.
	// empty if the tournament is not scheduled or start when is full if is enabled.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// start when is full.
	// if is enabled the tournament will start when the number of participants is equal to max_participants.
	// but if the tournament is scheduled the tournament will start at the start_time.
	StartWhenFull bool `protobuf:"varint,7,opt,name=start_when_full,json=startWhenFull,proto3" json:"start_when_full,omitempty"`
	// participants need to be confirmed.
	// if is enabled the participants need to confirm their participation.
	NeedToConfirm bool `protobuf:"varint,8,opt,name=need_to_confirm,json=needToConfirm,proto3" json:"need_to_confirm,omitempty"`
	// number of participants per team.
	// if is 0 the number of participants per team is not limited.
	// if the mode is PLAYERS this value is ignored.
	ParticipantsPerTeam uint32                               `protobuf:"varint,9,opt,name=participants_per_team,json=participantsPerTeam,proto3" json:"participants_per_team,omitempty"`
	Providers           []*Tournament_Configuration_Provider `protobuf:"bytes,10,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (x *Tournament_Configuration) Reset() {
	*x = Tournament_Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_Configuration) ProtoMessage() {}

func (x *Tournament_Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_Configuration.ProtoReflect.Descriptor instead.
func (*Tournament_Configuration) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Tournament_Configuration) GetMaxParticipants() uint32 {
	if x != nil {
		return x.MaxParticipants
	}
	return 0
}

func (x *Tournament_Configuration) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

func (x *Tournament_Configuration) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *Tournament_Configuration) GetCheckinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CheckinTime
	}
	return nil
}

func (x *Tournament_Configuration) GetCheckinDuration() *durationpb.Duration {
	if x != nil {
		return x.CheckinDuration
	}
	return nil
}

func (x *Tournament_Configuration) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Tournament_Configuration) GetStartWhenFull() bool {
	if x != nil {
		return x.StartWhenFull
	}
	return false
}

func (x *Tournament_Configuration) GetNeedToConfirm() bool {
	if x != nil {
		return x.NeedToConfirm
	}
	return false
}

func (x *Tournament_Configuration) GetParticipantsPerTeam() uint32 {
	if x != nil {
		return x.ParticipantsPerTeam
	}
	return 0
}

func (x *Tournament_Configuration) GetProviders() []*Tournament_Configuration_Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

type Tournament_TeamsParticipants_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JoinTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	CheckinTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=checkin_time,json=checkinTime,proto3" json:"checkin_time,omitempty"`
	ConfirmTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=confirm_time,json=confirmTime,proto3" json:"confirm_time,omitempty"`
	// players contains the players of the team.
	Players []*Tournament_TeamsParticipants_Team_Player `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty"`
	// seed is the position of the team in the tournament.
	// this is used to balance the matches.
	Seed uint32 `protobuf:"varint,6,opt,name=seed,proto3" json:"seed,omitempty"`
	// synced?
	Synced bool `protobuf:"varint,7,opt,name=synced,proto3" json:"synced,omitempty"`
}

func (x *Tournament_TeamsParticipants_Team) Reset() {
	*x = Tournament_TeamsParticipants_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_TeamsParticipants_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_TeamsParticipants_Team) ProtoMessage() {}

func (x *Tournament_TeamsParticipants_Team) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_TeamsParticipants_Team.ProtoReflect.Descriptor instead.
func (*Tournament_TeamsParticipants_Team) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Tournament_TeamsParticipants_Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tournament_TeamsParticipants_Team) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

func (x *Tournament_TeamsParticipants_Team) GetCheckinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CheckinTime
	}
	return nil
}

func (x *Tournament_TeamsParticipants_Team) GetConfirmTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfirmTime
	}
	return nil
}

func (x *Tournament_TeamsParticipants_Team) GetPlayers() []*Tournament_TeamsParticipants_Team_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Tournament_TeamsParticipants_Team) GetSeed() uint32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *Tournament_TeamsParticipants_Team) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Tournament_TeamsParticipants_Team_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JoinTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	CheckinTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=checkin_time,json=checkinTime,proto3" json:"checkin_time,omitempty"`
	ConfirmTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=confirm_time,json=confirmTime,proto3" json:"confirm_time,omitempty"`
	// accepted record true if the player accept to player the tournament.
	AcceptTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=accept_time,json=acceptTime,proto3" json:"accept_time,omitempty"`
	// synced?
	Synced bool `protobuf:"varint,6,opt,name=synced,proto3" json:"synced,omitempty"`
}

func (x *Tournament_TeamsParticipants_Team_Player) Reset() {
	*x = Tournament_TeamsParticipants_Team_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_TeamsParticipants_Team_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_TeamsParticipants_Team_Player) ProtoMessage() {}

func (x *Tournament_TeamsParticipants_Team_Player) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_TeamsParticipants_Team_Player.ProtoReflect.Descriptor instead.
func (*Tournament_TeamsParticipants_Team_Player) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Tournament_TeamsParticipants_Team_Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tournament_TeamsParticipants_Team_Player) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

func (x *Tournament_TeamsParticipants_Team_Player) GetCheckinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CheckinTime
	}
	return nil
}

func (x *Tournament_TeamsParticipants_Team_Player) GetConfirmTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfirmTime
	}
	return nil
}

func (x *Tournament_TeamsParticipants_Team_Player) GetAcceptTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AcceptTime
	}
	return nil
}

func (x *Tournament_TeamsParticipants_Team_Player) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

type Tournament_PlayersParticipants_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JoinTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	CheckinTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=checkin_time,json=checkinTime,proto3" json:"checkin_time,omitempty"`
	ConfirmTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=confirm_time,json=confirmTime,proto3" json:"confirm_time,omitempty"`
	// seed is the position of the player in the tournament.
	Seed uint32 `protobuf:"varint,5,opt,name=seed,proto3" json:"seed,omitempty"`
	// synced?
	Synced bool `protobuf:"varint,6,opt,name=synced,proto3" json:"synced,omitempty"`
}

func (x *Tournament_PlayersParticipants_Player) Reset() {
	*x = Tournament_PlayersParticipants_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_PlayersParticipants_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_PlayersParticipants_Player) ProtoMessage() {}

func (x *Tournament_PlayersParticipants_Player) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_PlayersParticipants_Player.ProtoReflect.Descriptor instead.
func (*Tournament_PlayersParticipants_Player) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Tournament_PlayersParticipants_Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tournament_PlayersParticipants_Player) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

func (x *Tournament_PlayersParticipants_Player) GetCheckinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CheckinTime
	}
	return nil
}

func (x *Tournament_PlayersParticipants_Player) GetConfirmTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfirmTime
	}
	return nil
}

func (x *Tournament_PlayersParticipants_Player) GetSeed() uint32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *Tournament_PlayersParticipants_Player) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

// Match contains the information of a match of the tournament.
type Tournament_Phase_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Tournament_Phase_Match) Reset() {
	*x = Tournament_Phase_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_Phase_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_Phase_Match) ProtoMessage() {}

func (x *Tournament_Phase_Match) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_Phase_Match.ProtoReflect.Descriptor instead.
func (*Tournament_Phase_Match) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Tournament_Phase_Match) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// configuration for the phase.
type Tournament_Phase_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Tournament_Phase_Configuration) Reset() {
	*x = Tournament_Phase_Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_Phase_Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_Phase_Configuration) ProtoMessage() {}

func (x *Tournament_Phase_Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_Phase_Configuration.ProtoReflect.Descriptor instead.
func (*Tournament_Phase_Configuration) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 2, 1}
}

// providers needed to play the tournament.
// for example: jokenpo, hylex, steam, xbox
type Tournament_Configuration_Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Optional bool   `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *Tournament_Configuration_Provider) Reset() {
	*x = Tournament_Configuration_Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament_Configuration_Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament_Configuration_Provider) ProtoMessage() {}

func (x *Tournament_Configuration_Provider) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament_Configuration_Provider.ProtoReflect.Descriptor instead.
func (*Tournament_Configuration_Provider) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Tournament_Configuration_Provider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tournament_Configuration_Provider) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type TournamentMatch_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the participant.
	// empty mean that is a bye or to be determined.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// bye is set when the participant is a bye.
	Bye bool `protobuf:"varint,2,opt,name=bye,proto3" json:"bye,omitempty"`
	// ready_time is set when the team ready for the match.
	// TODO: Add option to player give ready when the camp need it.
	ReadyTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ready_time,json=readyTime,proto3" json:"ready_time,omitempty"`
	// store the score of the participant.
	Score int64 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	// previous match id.
	// empty mean that is the first match or not related to any match.
	PreviousMatchId string `protobuf:"bytes,5,opt,name=previous_match_id,json=previousMatchId,proto3" json:"previous_match_id,omitempty"`
	// winner
	Winner bool `protobuf:"varint,6,opt,name=winner,proto3" json:"winner,omitempty"`
	// if the participant is a team the players will be here.
	// We are using the same players from the tournament or the previous match.
	// TODO: Add an opcion to choose if we want to use the players from the tournament or the previous match.
	Players []string `protobuf:"bytes,7,rep,name=players,proto3" json:"players,omitempty"`
	// seed of the participant.
	Seed uint32 `protobuf:"varint,8,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *TournamentMatch_Participant) Reset() {
	*x = TournamentMatch_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_tournament_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMatch_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMatch_Participant) ProtoMessage() {}

func (x *TournamentMatch_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_tournament_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMatch_Participant.ProtoReflect.Descriptor instead.
func (*TournamentMatch_Participant) Descriptor() ([]byte, []int) {
	return file_common_v1_tournament_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TournamentMatch_Participant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentMatch_Participant) GetBye() bool {
	if x != nil {
		return x.Bye
	}
	return false
}

func (x *TournamentMatch_Participant) GetReadyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadyTime
	}
	return nil
}

func (x *TournamentMatch_Participant) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TournamentMatch_Participant) GetPreviousMatchId() string {
	if x != nil {
		return x.PreviousMatchId
	}
	return ""
}

func (x *TournamentMatch_Participant) GetWinner() bool {
	if x != nil {
		return x.Winner
	}
	return false
}

func (x *TournamentMatch_Participant) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TournamentMatch_Participant) GetSeed() uint32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

var File_common_v1_tournament_proto protoreflect.FileDescriptor

var file_common_v1_tournament_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x11, 0x0a, 0x0a, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xc9, 0x05, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x1a, 0xef, 0x04, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x1a, 0xa4, 0x02, 0x0a,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x1a, 0xdf, 0x02, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0xfb, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x1a, 0xc3, 0x02, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x06, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x12, 0x41,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x17, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x0f, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf6, 0x04, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x68, 0x65, 0x6e,
	0x46, 0x75, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e,
	0x65, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x4a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x36, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x41, 0x4d,
	0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x01,
	0x22, 0xaf, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49,
	0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x0a, 0x22, 0xa3, 0x03, 0x0a, 0x0f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xf2, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x79, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x79, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x4f,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x4f, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x42, 0xa4, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6d, 0x6f, 0x6e, 0x62,
	0x65, 0x72, 0x72, 0x75, 0x74, 0x74, 0x69, 0x2f, 0x6a, 0x75, 0x6d, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43,
	0x58, 0x58, 0xaa, 0x02, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_v1_tournament_proto_rawDescOnce sync.Once
	file_common_v1_tournament_proto_rawDescData = file_common_v1_tournament_proto_rawDesc
)

func file_common_v1_tournament_proto_rawDescGZIP() []byte {
	file_common_v1_tournament_proto_rawDescOnce.Do(func() {
		file_common_v1_tournament_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v1_tournament_proto_rawDescData)
	})
	return file_common_v1_tournament_proto_rawDescData
}

var file_common_v1_tournament_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_v1_tournament_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_common_v1_tournament_proto_goTypes = []interface{}{
	(Tournament_ParticipantsMode)(0),                 // 0: common.v1.Tournament.ParticipantsMode
	(Tournament_State)(0),                            // 1: common.v1.Tournament.State
	(TournamentMatch_State)(0),                       // 2: common.v1.TournamentMatch.State
	(*Tournament)(nil),                               // 3: common.v1.Tournament
	(*TournamentMatch)(nil),                          // 4: common.v1.TournamentMatch
	(*Tournament_TeamsParticipants)(nil),             // 5: common.v1.Tournament.TeamsParticipants
	(*Tournament_PlayersParticipants)(nil),           // 6: common.v1.Tournament.PlayersParticipants
	(*Tournament_Phase)(nil),                         // 7: common.v1.Tournament.Phase
	(*Tournament_Configuration)(nil),                 // 8: common.v1.Tournament.Configuration
	(*Tournament_TeamsParticipants_Team)(nil),        // 9: common.v1.Tournament.TeamsParticipants.Team
	(*Tournament_TeamsParticipants_Team_Player)(nil), // 10: common.v1.Tournament.TeamsParticipants.Team.Player
	(*Tournament_PlayersParticipants_Player)(nil),    // 11: common.v1.Tournament.PlayersParticipants.Player
	(*Tournament_Phase_Match)(nil),                   // 12: common.v1.Tournament.Phase.Match
	(*Tournament_Phase_Configuration)(nil),           // 13: common.v1.Tournament.Phase.Configuration
	(*Tournament_Configuration_Provider)(nil),        // 14: common.v1.Tournament.Configuration.Provider
	(*TournamentMatch_Participant)(nil),              // 15: common.v1.TournamentMatch.Participant
	(*timestamppb.Timestamp)(nil),                    // 16: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                      // 17: google.protobuf.Duration
}
var file_common_v1_tournament_proto_depIdxs = []int32{
	9,  // 0: common.v1.Tournament.TeamsParticipants.teams:type_name -> common.v1.Tournament.TeamsParticipants.Team
	11, // 1: common.v1.Tournament.PlayersParticipants.players:type_name -> common.v1.Tournament.PlayersParticipants.Player
	12, // 2: common.v1.Tournament.Phase.matches:type_name -> common.v1.Tournament.Phase.Match
	7,  // 3: common.v1.Tournament.Phase.phases:type_name -> common.v1.Tournament.Phase
	13, // 4: common.v1.Tournament.Phase.config:type_name -> common.v1.Tournament.Phase.Configuration
	16, // 5: common.v1.Tournament.Configuration.join_time:type_name -> google.protobuf.Timestamp
	16, // 6: common.v1.Tournament.Configuration.close_time:type_name -> google.protobuf.Timestamp
	16, // 7: common.v1.Tournament.Configuration.checkin_time:type_name -> google.protobuf.Timestamp
	17, // 8: common.v1.Tournament.Configuration.checkin_duration:type_name -> google.protobuf.Duration
	16, // 9: common.v1.Tournament.Configuration.start_time:type_name -> google.protobuf.Timestamp
	14, // 10: common.v1.Tournament.Configuration.providers:type_name -> common.v1.Tournament.Configuration.Provider
	16, // 11: common.v1.Tournament.TeamsParticipants.Team.join_time:type_name -> google.protobuf.Timestamp
	16, // 12: common.v1.Tournament.TeamsParticipants.Team.checkin_time:type_name -> google.protobuf.Timestamp
	16, // 13: common.v1.Tournament.TeamsParticipants.Team.confirm_time:type_name -> google.protobuf.Timestamp
	10, // 14: common.v1.Tournament.TeamsParticipants.Team.players:type_name -> common.v1.Tournament.TeamsParticipants.Team.Player
	16, // 15: common.v1.Tournament.TeamsParticipants.Team.Player.join_time:type_name -> google.protobuf.Timestamp
	16, // 16: common.v1.Tournament.TeamsParticipants.Team.Player.checkin_time:type_name -> google.protobuf.Timestamp
	16, // 17: common.v1.Tournament.TeamsParticipants.Team.Player.confirm_time:type_name -> google.protobuf.Timestamp
	16, // 18: common.v1.Tournament.TeamsParticipants.Team.Player.accept_time:type_name -> google.protobuf.Timestamp
	16, // 19: common.v1.Tournament.PlayersParticipants.Player.join_time:type_name -> google.protobuf.Timestamp
	16, // 20: common.v1.Tournament.PlayersParticipants.Player.checkin_time:type_name -> google.protobuf.Timestamp
	16, // 21: common.v1.Tournament.PlayersParticipants.Player.confirm_time:type_name -> google.protobuf.Timestamp
	16, // 22: common.v1.TournamentMatch.Participant.ready_time:type_name -> google.protobuf.Timestamp
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_common_v1_tournament_proto_init() }
func file_common_v1_tournament_proto_init() {
	if File_common_v1_tournament_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_v1_tournament_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_TeamsParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_PlayersParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_Phase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_TeamsParticipants_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_TeamsParticipants_Team_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_PlayersParticipants_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_Phase_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_Phase_Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament_Configuration_Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_tournament_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMatch_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v1_tournament_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_tournament_proto_goTypes,
		DependencyIndexes: file_common_v1_tournament_proto_depIdxs,
		EnumInfos:         file_common_v1_tournament_proto_enumTypes,
		MessageInfos:      file_common_v1_tournament_proto_msgTypes,
	}.Build()
	File_common_v1_tournament_proto = out.File
	file_common_v1_tournament_proto_rawDesc = nil
	file_common_v1_tournament_proto_goTypes = nil
	file_common_v1_tournament_proto_depIdxs = nil
}
