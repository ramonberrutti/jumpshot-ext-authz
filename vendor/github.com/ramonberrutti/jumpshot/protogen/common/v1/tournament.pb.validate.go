// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/tournament.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Tournament with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tournament) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TournamentMultiError, or
// nil if none found.
func (m *Tournament) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TournamentMultiError(errors)
	}

	return nil
}

// TournamentMultiError is an error wrapping multiple validation errors
// returned by Tournament.ValidateAll() if the designated constraints aren't met.
type TournamentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TournamentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TournamentMultiError) AllErrors() []error { return m }

// TournamentValidationError is the validation error returned by
// Tournament.Validate if the designated constraints aren't met.
type TournamentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TournamentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TournamentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TournamentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TournamentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TournamentValidationError) ErrorName() string { return "TournamentValidationError" }

// Error satisfies the builtin error interface
func (e TournamentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TournamentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TournamentValidationError{}

// Validate checks the field values on TournamentMatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TournamentMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TournamentMatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TournamentMatchMultiError, or nil if none found.
func (m *TournamentMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *TournamentMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TournamentMatchMultiError(errors)
	}

	return nil
}

// TournamentMatchMultiError is an error wrapping multiple validation errors
// returned by TournamentMatch.ValidateAll() if the designated constraints
// aren't met.
type TournamentMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TournamentMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TournamentMatchMultiError) AllErrors() []error { return m }

// TournamentMatchValidationError is the validation error returned by
// TournamentMatch.Validate if the designated constraints aren't met.
type TournamentMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TournamentMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TournamentMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TournamentMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TournamentMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TournamentMatchValidationError) ErrorName() string { return "TournamentMatchValidationError" }

// Error satisfies the builtin error interface
func (e TournamentMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournamentMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TournamentMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TournamentMatchValidationError{}

// Validate checks the field values on Tournament_TeamsParticipants with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Tournament_TeamsParticipants) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_TeamsParticipants with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Tournament_TeamsParticipantsMultiError, or nil if none found.
func (m *Tournament_TeamsParticipants) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_TeamsParticipants) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Tournament_TeamsParticipantsValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Tournament_TeamsParticipantsValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Tournament_TeamsParticipantsValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Tournament_TeamsParticipantsMultiError(errors)
	}

	return nil
}

// Tournament_TeamsParticipantsMultiError is an error wrapping multiple
// validation errors returned by Tournament_TeamsParticipants.ValidateAll() if
// the designated constraints aren't met.
type Tournament_TeamsParticipantsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_TeamsParticipantsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_TeamsParticipantsMultiError) AllErrors() []error { return m }

// Tournament_TeamsParticipantsValidationError is the validation error returned
// by Tournament_TeamsParticipants.Validate if the designated constraints
// aren't met.
type Tournament_TeamsParticipantsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_TeamsParticipantsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_TeamsParticipantsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_TeamsParticipantsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_TeamsParticipantsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_TeamsParticipantsValidationError) ErrorName() string {
	return "Tournament_TeamsParticipantsValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_TeamsParticipantsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_TeamsParticipants.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_TeamsParticipantsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_TeamsParticipantsValidationError{}

// Validate checks the field values on Tournament_PlayersParticipants with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Tournament_PlayersParticipants) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_PlayersParticipants with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Tournament_PlayersParticipantsMultiError, or nil if none found.
func (m *Tournament_PlayersParticipants) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_PlayersParticipants) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Tournament_PlayersParticipantsValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Tournament_PlayersParticipantsValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Tournament_PlayersParticipantsValidationError{
					field:  fmt.Sprintf("Players[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Tournament_PlayersParticipantsMultiError(errors)
	}

	return nil
}

// Tournament_PlayersParticipantsMultiError is an error wrapping multiple
// validation errors returned by Tournament_PlayersParticipants.ValidateAll()
// if the designated constraints aren't met.
type Tournament_PlayersParticipantsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_PlayersParticipantsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_PlayersParticipantsMultiError) AllErrors() []error { return m }

// Tournament_PlayersParticipantsValidationError is the validation error
// returned by Tournament_PlayersParticipants.Validate if the designated
// constraints aren't met.
type Tournament_PlayersParticipantsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_PlayersParticipantsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_PlayersParticipantsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_PlayersParticipantsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_PlayersParticipantsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_PlayersParticipantsValidationError) ErrorName() string {
	return "Tournament_PlayersParticipantsValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_PlayersParticipantsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_PlayersParticipants.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_PlayersParticipantsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_PlayersParticipantsValidationError{}

// Validate checks the field values on Tournament_Phase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Tournament_Phase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_Phase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Tournament_PhaseMultiError, or nil if none found.
func (m *Tournament_Phase) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_Phase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetMatches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Tournament_PhaseValidationError{
						field:  fmt.Sprintf("Matches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Tournament_PhaseValidationError{
						field:  fmt.Sprintf("Matches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Tournament_PhaseValidationError{
					field:  fmt.Sprintf("Matches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPhases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Tournament_PhaseValidationError{
						field:  fmt.Sprintf("Phases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Tournament_PhaseValidationError{
						field:  fmt.Sprintf("Phases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Tournament_PhaseValidationError{
					field:  fmt.Sprintf("Phases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Completed

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_PhaseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_PhaseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_PhaseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Tournament_PhaseMultiError(errors)
	}

	return nil
}

// Tournament_PhaseMultiError is an error wrapping multiple validation errors
// returned by Tournament_Phase.ValidateAll() if the designated constraints
// aren't met.
type Tournament_PhaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_PhaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_PhaseMultiError) AllErrors() []error { return m }

// Tournament_PhaseValidationError is the validation error returned by
// Tournament_Phase.Validate if the designated constraints aren't met.
type Tournament_PhaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_PhaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_PhaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_PhaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_PhaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_PhaseValidationError) ErrorName() string { return "Tournament_PhaseValidationError" }

// Error satisfies the builtin error interface
func (e Tournament_PhaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_Phase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_PhaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_PhaseValidationError{}

// Validate checks the field values on Tournament_Configuration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Tournament_Configuration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_Configuration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Tournament_ConfigurationMultiError, or nil if none found.
func (m *Tournament_Configuration) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_Configuration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxParticipants

	if all {
		switch v := interface{}(m.GetJoinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_ConfigurationValidationError{
				field:  "JoinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_ConfigurationValidationError{
				field:  "CloseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCheckinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_ConfigurationValidationError{
				field:  "CheckinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCheckinDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "CheckinDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "CheckinDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckinDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_ConfigurationValidationError{
				field:  "CheckinDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_ConfigurationValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_ConfigurationValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartWhenFull

	// no validation rules for NeedToConfirm

	// no validation rules for ParticipantsPerTeam

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Tournament_ConfigurationValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Tournament_ConfigurationValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Tournament_ConfigurationValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Tournament_ConfigurationMultiError(errors)
	}

	return nil
}

// Tournament_ConfigurationMultiError is an error wrapping multiple validation
// errors returned by Tournament_Configuration.ValidateAll() if the designated
// constraints aren't met.
type Tournament_ConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_ConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_ConfigurationMultiError) AllErrors() []error { return m }

// Tournament_ConfigurationValidationError is the validation error returned by
// Tournament_Configuration.Validate if the designated constraints aren't met.
type Tournament_ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_ConfigurationValidationError) ErrorName() string {
	return "Tournament_ConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_Configuration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_ConfigurationValidationError{}

// Validate checks the field values on Tournament_TeamsParticipants_Team with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Tournament_TeamsParticipants_Team) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_TeamsParticipants_Team
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Tournament_TeamsParticipants_TeamMultiError, or nil if none found.
func (m *Tournament_TeamsParticipants_Team) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_TeamsParticipants_Team) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetJoinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_TeamValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_TeamValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_TeamsParticipants_TeamValidationError{
				field:  "JoinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCheckinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_TeamValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_TeamValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_TeamsParticipants_TeamValidationError{
				field:  "CheckinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfirmTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_TeamValidationError{
					field:  "ConfirmTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_TeamValidationError{
					field:  "ConfirmTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfirmTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_TeamsParticipants_TeamValidationError{
				field:  "ConfirmTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPlayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Tournament_TeamsParticipants_TeamValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Tournament_TeamsParticipants_TeamValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Tournament_TeamsParticipants_TeamValidationError{
					field:  fmt.Sprintf("Players[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Seed

	// no validation rules for Synced

	if len(errors) > 0 {
		return Tournament_TeamsParticipants_TeamMultiError(errors)
	}

	return nil
}

// Tournament_TeamsParticipants_TeamMultiError is an error wrapping multiple
// validation errors returned by
// Tournament_TeamsParticipants_Team.ValidateAll() if the designated
// constraints aren't met.
type Tournament_TeamsParticipants_TeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_TeamsParticipants_TeamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_TeamsParticipants_TeamMultiError) AllErrors() []error { return m }

// Tournament_TeamsParticipants_TeamValidationError is the validation error
// returned by Tournament_TeamsParticipants_Team.Validate if the designated
// constraints aren't met.
type Tournament_TeamsParticipants_TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_TeamsParticipants_TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_TeamsParticipants_TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_TeamsParticipants_TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_TeamsParticipants_TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_TeamsParticipants_TeamValidationError) ErrorName() string {
	return "Tournament_TeamsParticipants_TeamValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_TeamsParticipants_TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_TeamsParticipants_Team.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_TeamsParticipants_TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_TeamsParticipants_TeamValidationError{}

// Validate checks the field values on Tournament_TeamsParticipants_Team_Player
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Tournament_TeamsParticipants_Team_Player) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// Tournament_TeamsParticipants_Team_Player with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// Tournament_TeamsParticipants_Team_PlayerMultiError, or nil if none found.
func (m *Tournament_TeamsParticipants_Team_Player) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_TeamsParticipants_Team_Player) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetJoinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_Team_PlayerValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_Team_PlayerValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_TeamsParticipants_Team_PlayerValidationError{
				field:  "JoinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCheckinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_Team_PlayerValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_Team_PlayerValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_TeamsParticipants_Team_PlayerValidationError{
				field:  "CheckinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfirmTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_Team_PlayerValidationError{
					field:  "ConfirmTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_Team_PlayerValidationError{
					field:  "ConfirmTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfirmTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_TeamsParticipants_Team_PlayerValidationError{
				field:  "ConfirmTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAcceptTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_Team_PlayerValidationError{
					field:  "AcceptTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_TeamsParticipants_Team_PlayerValidationError{
					field:  "AcceptTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAcceptTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_TeamsParticipants_Team_PlayerValidationError{
				field:  "AcceptTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Synced

	if len(errors) > 0 {
		return Tournament_TeamsParticipants_Team_PlayerMultiError(errors)
	}

	return nil
}

// Tournament_TeamsParticipants_Team_PlayerMultiError is an error wrapping
// multiple validation errors returned by
// Tournament_TeamsParticipants_Team_Player.ValidateAll() if the designated
// constraints aren't met.
type Tournament_TeamsParticipants_Team_PlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_TeamsParticipants_Team_PlayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_TeamsParticipants_Team_PlayerMultiError) AllErrors() []error { return m }

// Tournament_TeamsParticipants_Team_PlayerValidationError is the validation
// error returned by Tournament_TeamsParticipants_Team_Player.Validate if the
// designated constraints aren't met.
type Tournament_TeamsParticipants_Team_PlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_TeamsParticipants_Team_PlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_TeamsParticipants_Team_PlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_TeamsParticipants_Team_PlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_TeamsParticipants_Team_PlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_TeamsParticipants_Team_PlayerValidationError) ErrorName() string {
	return "Tournament_TeamsParticipants_Team_PlayerValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_TeamsParticipants_Team_PlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_TeamsParticipants_Team_Player.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_TeamsParticipants_Team_PlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_TeamsParticipants_Team_PlayerValidationError{}

// Validate checks the field values on Tournament_PlayersParticipants_Player
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Tournament_PlayersParticipants_Player) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_PlayersParticipants_Player
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Tournament_PlayersParticipants_PlayerMultiError, or nil if none found.
func (m *Tournament_PlayersParticipants_Player) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_PlayersParticipants_Player) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetJoinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_PlayersParticipants_PlayerValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_PlayersParticipants_PlayerValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_PlayersParticipants_PlayerValidationError{
				field:  "JoinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCheckinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_PlayersParticipants_PlayerValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_PlayersParticipants_PlayerValidationError{
					field:  "CheckinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_PlayersParticipants_PlayerValidationError{
				field:  "CheckinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfirmTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Tournament_PlayersParticipants_PlayerValidationError{
					field:  "ConfirmTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Tournament_PlayersParticipants_PlayerValidationError{
					field:  "ConfirmTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfirmTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Tournament_PlayersParticipants_PlayerValidationError{
				field:  "ConfirmTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Seed

	// no validation rules for Synced

	if len(errors) > 0 {
		return Tournament_PlayersParticipants_PlayerMultiError(errors)
	}

	return nil
}

// Tournament_PlayersParticipants_PlayerMultiError is an error wrapping
// multiple validation errors returned by
// Tournament_PlayersParticipants_Player.ValidateAll() if the designated
// constraints aren't met.
type Tournament_PlayersParticipants_PlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_PlayersParticipants_PlayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_PlayersParticipants_PlayerMultiError) AllErrors() []error { return m }

// Tournament_PlayersParticipants_PlayerValidationError is the validation error
// returned by Tournament_PlayersParticipants_Player.Validate if the
// designated constraints aren't met.
type Tournament_PlayersParticipants_PlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_PlayersParticipants_PlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_PlayersParticipants_PlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_PlayersParticipants_PlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_PlayersParticipants_PlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_PlayersParticipants_PlayerValidationError) ErrorName() string {
	return "Tournament_PlayersParticipants_PlayerValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_PlayersParticipants_PlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_PlayersParticipants_Player.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_PlayersParticipants_PlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_PlayersParticipants_PlayerValidationError{}

// Validate checks the field values on Tournament_Phase_Match with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Tournament_Phase_Match) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_Phase_Match with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Tournament_Phase_MatchMultiError, or nil if none found.
func (m *Tournament_Phase_Match) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_Phase_Match) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return Tournament_Phase_MatchMultiError(errors)
	}

	return nil
}

// Tournament_Phase_MatchMultiError is an error wrapping multiple validation
// errors returned by Tournament_Phase_Match.ValidateAll() if the designated
// constraints aren't met.
type Tournament_Phase_MatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_Phase_MatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_Phase_MatchMultiError) AllErrors() []error { return m }

// Tournament_Phase_MatchValidationError is the validation error returned by
// Tournament_Phase_Match.Validate if the designated constraints aren't met.
type Tournament_Phase_MatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_Phase_MatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_Phase_MatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_Phase_MatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_Phase_MatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_Phase_MatchValidationError) ErrorName() string {
	return "Tournament_Phase_MatchValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_Phase_MatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_Phase_Match.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_Phase_MatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_Phase_MatchValidationError{}

// Validate checks the field values on Tournament_Phase_Configuration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Tournament_Phase_Configuration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_Phase_Configuration with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Tournament_Phase_ConfigurationMultiError, or nil if none found.
func (m *Tournament_Phase_Configuration) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_Phase_Configuration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Tournament_Phase_ConfigurationMultiError(errors)
	}

	return nil
}

// Tournament_Phase_ConfigurationMultiError is an error wrapping multiple
// validation errors returned by Tournament_Phase_Configuration.ValidateAll()
// if the designated constraints aren't met.
type Tournament_Phase_ConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_Phase_ConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_Phase_ConfigurationMultiError) AllErrors() []error { return m }

// Tournament_Phase_ConfigurationValidationError is the validation error
// returned by Tournament_Phase_Configuration.Validate if the designated
// constraints aren't met.
type Tournament_Phase_ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_Phase_ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_Phase_ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_Phase_ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_Phase_ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_Phase_ConfigurationValidationError) ErrorName() string {
	return "Tournament_Phase_ConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_Phase_ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_Phase_Configuration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_Phase_ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_Phase_ConfigurationValidationError{}

// Validate checks the field values on Tournament_Configuration_Provider with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Tournament_Configuration_Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_Configuration_Provider
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Tournament_Configuration_ProviderMultiError, or nil if none found.
func (m *Tournament_Configuration_Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_Configuration_Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Optional

	if len(errors) > 0 {
		return Tournament_Configuration_ProviderMultiError(errors)
	}

	return nil
}

// Tournament_Configuration_ProviderMultiError is an error wrapping multiple
// validation errors returned by
// Tournament_Configuration_Provider.ValidateAll() if the designated
// constraints aren't met.
type Tournament_Configuration_ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_Configuration_ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_Configuration_ProviderMultiError) AllErrors() []error { return m }

// Tournament_Configuration_ProviderValidationError is the validation error
// returned by Tournament_Configuration_Provider.Validate if the designated
// constraints aren't met.
type Tournament_Configuration_ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_Configuration_ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_Configuration_ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_Configuration_ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_Configuration_ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_Configuration_ProviderValidationError) ErrorName() string {
	return "Tournament_Configuration_ProviderValidationError"
}

// Error satisfies the builtin error interface
func (e Tournament_Configuration_ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_Configuration_Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_Configuration_ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_Configuration_ProviderValidationError{}

// Validate checks the field values on TournamentMatch_Participant with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TournamentMatch_Participant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TournamentMatch_Participant with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TournamentMatch_ParticipantMultiError, or nil if none found.
func (m *TournamentMatch_Participant) ValidateAll() error {
	return m.validate(true)
}

func (m *TournamentMatch_Participant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Bye

	if all {
		switch v := interface{}(m.GetReadyTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TournamentMatch_ParticipantValidationError{
					field:  "ReadyTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TournamentMatch_ParticipantValidationError{
					field:  "ReadyTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadyTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TournamentMatch_ParticipantValidationError{
				field:  "ReadyTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Score

	// no validation rules for PreviousMatchId

	// no validation rules for Winner

	// no validation rules for Seed

	if len(errors) > 0 {
		return TournamentMatch_ParticipantMultiError(errors)
	}

	return nil
}

// TournamentMatch_ParticipantMultiError is an error wrapping multiple
// validation errors returned by TournamentMatch_Participant.ValidateAll() if
// the designated constraints aren't met.
type TournamentMatch_ParticipantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TournamentMatch_ParticipantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TournamentMatch_ParticipantMultiError) AllErrors() []error { return m }

// TournamentMatch_ParticipantValidationError is the validation error returned
// by TournamentMatch_Participant.Validate if the designated constraints
// aren't met.
type TournamentMatch_ParticipantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TournamentMatch_ParticipantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TournamentMatch_ParticipantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TournamentMatch_ParticipantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TournamentMatch_ParticipantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TournamentMatch_ParticipantValidationError) ErrorName() string {
	return "TournamentMatch_ParticipantValidationError"
}

// Error satisfies the builtin error interface
func (e TournamentMatch_ParticipantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournamentMatch_Participant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TournamentMatch_ParticipantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TournamentMatch_ParticipantValidationError{}
