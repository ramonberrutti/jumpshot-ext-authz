// Code generated by protoc-gen-jumpshot. DO NOT EDIT.
// source: common/v1/tournament.proto

package commonv1

import (
	"context"

	"google.golang.org/grpc"
)

var _ = context.Background()
var _ = grpc.ServiceRegistrar(nil)

func (m *Tournament_TeamsParticipants_Team_Player) JumpShotIndexClear() {
	// m.Id = ""
	if m, ok := interface{}(m.JoinTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.CheckinTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.ConfirmTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.AcceptTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	// m.Synced = false
}

func (m *Tournament_TeamsParticipants_Team) JumpShotIndexClear() {
	// m.Id = ""
	if m, ok := interface{}(m.JoinTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.CheckinTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.ConfirmTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.Players).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	// m.Seed = 0
	// m.Synced = false
}

func (m *Tournament_TeamsParticipants) JumpShotIndexClear() {
	if m, ok := interface{}(m.Teams).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

}

func (m *Tournament_PlayersParticipants_Player) JumpShotIndexClear() {
	// m.Id = ""
	if m, ok := interface{}(m.JoinTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.CheckinTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.ConfirmTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	// m.Seed = 0
	// m.Synced = false
}

func (m *Tournament_PlayersParticipants) JumpShotIndexClear() {
	if m, ok := interface{}(m.Players).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

}

func (m *Tournament_Phase_Match) JumpShotIndexClear() {
	// m.Id = ""
}

func (m *Tournament_Phase_Configuration) JumpShotIndexClear() {
}

func (m *Tournament_Phase) JumpShotIndexClear() {
	// m.Id = ""
	// m.Name = ""
	if m, ok := interface{}(m.Matches).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.Phases).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	// m.Completed = false
	// m.WaitFor = nil
	if m, ok := interface{}(m.Config).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

}

func (m *Tournament_Configuration_Provider) JumpShotIndexClear() {
	// m.Id = ""
	// m.Optional = false
}

func (m *Tournament_Configuration) JumpShotIndexClear() {
	// m.MaxParticipants = 0
	if m, ok := interface{}(m.JoinTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.CloseTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.CheckinTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.CheckinDuration).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	if m, ok := interface{}(m.StartTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	// m.StartWhenFull = false
	// m.NeedToConfirm = false
	// m.ParticipantsPerTeam = 0
	if m, ok := interface{}(m.Providers).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

}

func (m *Tournament) JumpShotIndexClear() {
}

func (m *TournamentMatch_Participant) JumpShotIndexClear() {
	// m.Id = ""
	// m.Bye = false
	if m, ok := interface{}(m.ReadyTime).(interface{ JumpShotIndexClear() }); ok {
		m.JumpShotIndexClear()
	}

	// m.Score = 0
	// m.PreviousMatchId = ""
	// m.Winner = false
	// m.Players = nil
	// m.Seed = 0
}

func (m *TournamentMatch) JumpShotIndexClear() {
}
