// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage/team.proto

package storage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Team with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Team) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Team with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TeamMultiError, or nil if none found.
func (m *Team) ValidateAll() error {
	return m.validate(true)
}

func (m *Team) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Tag

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TeamValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TeamValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TeamValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TeamValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TeamValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TeamValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for CreatedBy

	for idx, item := range m.GetPlayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TeamValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TeamValidationError{
						field:  fmt.Sprintf("Players[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TeamValidationError{
					field:  fmt.Sprintf("Players[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvitations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TeamValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TeamValidationError{
						field:  fmt.Sprintf("Invitations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TeamValidationError{
					field:  fmt.Sprintf("Invitations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TeamMultiError(errors)
	}

	return nil
}

// TeamMultiError is an error wrapping multiple validation errors returned by
// Team.ValidateAll() if the designated constraints aren't met.
type TeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamMultiError) AllErrors() []error { return m }

// TeamValidationError is the validation error returned by Team.Validate if the
// designated constraints aren't met.
type TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamValidationError) ErrorName() string { return "TeamValidationError" }

// Error satisfies the builtin error interface
func (e TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamValidationError{}

// Validate checks the field values on TeamName with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TeamName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeamNameMultiError, or nil
// if none found.
func (m *TeamName) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return TeamNameMultiError(errors)
	}

	return nil
}

// TeamNameMultiError is an error wrapping multiple validation errors returned
// by TeamName.ValidateAll() if the designated constraints aren't met.
type TeamNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamNameMultiError) AllErrors() []error { return m }

// TeamNameValidationError is the validation error returned by
// TeamName.Validate if the designated constraints aren't met.
type TeamNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamNameValidationError) ErrorName() string { return "TeamNameValidationError" }

// Error satisfies the builtin error interface
func (e TeamNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamNameValidationError{}

// Validate checks the field values on TeamPlayer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TeamPlayer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamPlayer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeamPlayerMultiError, or
// nil if none found.
func (m *TeamPlayer) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamPlayer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TeamPlayerValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TeamPlayerValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TeamPlayerValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TeamPlayerValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TeamPlayerValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TeamPlayerValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TeamPlayerMultiError(errors)
	}

	return nil
}

// TeamPlayerMultiError is an error wrapping multiple validation errors
// returned by TeamPlayer.ValidateAll() if the designated constraints aren't met.
type TeamPlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamPlayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamPlayerMultiError) AllErrors() []error { return m }

// TeamPlayerValidationError is the validation error returned by
// TeamPlayer.Validate if the designated constraints aren't met.
type TeamPlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamPlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamPlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamPlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamPlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamPlayerValidationError) ErrorName() string { return "TeamPlayerValidationError" }

// Error satisfies the builtin error interface
func (e TeamPlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamPlayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamPlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamPlayerValidationError{}

// Validate checks the field values on Team_Player with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Team_Player) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Team_Player with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Team_PlayerMultiError, or
// nil if none found.
func (m *Team_Player) ValidateAll() error {
	return m.validate(true)
}

func (m *Team_Player) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetJoinTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Team_PlayerValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Team_PlayerValidationError{
					field:  "JoinTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Team_PlayerValidationError{
				field:  "JoinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLeaveTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Team_PlayerValidationError{
					field:  "LeaveTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Team_PlayerValidationError{
					field:  "LeaveTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeaveTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Team_PlayerValidationError{
				field:  "LeaveTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Synced

	if len(errors) > 0 {
		return Team_PlayerMultiError(errors)
	}

	return nil
}

// Team_PlayerMultiError is an error wrapping multiple validation errors
// returned by Team_Player.ValidateAll() if the designated constraints aren't met.
type Team_PlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Team_PlayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Team_PlayerMultiError) AllErrors() []error { return m }

// Team_PlayerValidationError is the validation error returned by
// Team_Player.Validate if the designated constraints aren't met.
type Team_PlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Team_PlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Team_PlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Team_PlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Team_PlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Team_PlayerValidationError) ErrorName() string { return "Team_PlayerValidationError" }

// Error satisfies the builtin error interface
func (e Team_PlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeam_Player.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Team_PlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Team_PlayerValidationError{}

// Validate checks the field values on TeamPlayer_Team with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TeamPlayer_Team) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamPlayer_Team with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TeamPlayer_TeamMultiError, or nil if none found.
func (m *TeamPlayer_Team) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamPlayer_Team) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TeamPlayer_TeamMultiError(errors)
	}

	return nil
}

// TeamPlayer_TeamMultiError is an error wrapping multiple validation errors
// returned by TeamPlayer_Team.ValidateAll() if the designated constraints
// aren't met.
type TeamPlayer_TeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamPlayer_TeamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamPlayer_TeamMultiError) AllErrors() []error { return m }

// TeamPlayer_TeamValidationError is the validation error returned by
// TeamPlayer_Team.Validate if the designated constraints aren't met.
type TeamPlayer_TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamPlayer_TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamPlayer_TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamPlayer_TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamPlayer_TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamPlayer_TeamValidationError) ErrorName() string { return "TeamPlayer_TeamValidationError" }

// Error satisfies the builtin error interface
func (e TeamPlayer_TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamPlayer_Team.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamPlayer_TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamPlayer_TeamValidationError{}
