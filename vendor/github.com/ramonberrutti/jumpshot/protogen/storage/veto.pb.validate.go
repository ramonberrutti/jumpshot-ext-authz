// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage/veto.proto

package storage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Veto with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Veto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Veto with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VetoMultiError, or nil if none found.
func (m *Veto) ValidateAll() error {
	return m.validate(true)
}

func (m *Veto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VetoValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VetoValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VetoValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VetoValidationError{
						field:  fmt.Sprintf("States[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VetoValidationError{
						field:  fmt.Sprintf("States[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VetoValidationError{
					field:  fmt.Sprintf("States[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VetoMultiError(errors)
	}

	return nil
}

// VetoMultiError is an error wrapping multiple validation errors returned by
// Veto.ValidateAll() if the designated constraints aren't met.
type VetoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VetoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VetoMultiError) AllErrors() []error { return m }

// VetoValidationError is the validation error returned by Veto.Validate if the
// designated constraints aren't met.
type VetoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VetoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VetoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VetoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VetoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VetoValidationError) ErrorName() string { return "VetoValidationError" }

// Error satisfies the builtin error interface
func (e VetoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVeto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VetoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VetoValidationError{}

// Validate checks the field values on Veto_Action with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Veto_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Veto_Action with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Veto_ActionMultiError, or
// nil if none found.
func (m *Veto_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *Veto_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Team

	// no validation rules for Action

	if len(errors) > 0 {
		return Veto_ActionMultiError(errors)
	}

	return nil
}

// Veto_ActionMultiError is an error wrapping multiple validation errors
// returned by Veto_Action.ValidateAll() if the designated constraints aren't met.
type Veto_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Veto_ActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Veto_ActionMultiError) AllErrors() []error { return m }

// Veto_ActionValidationError is the validation error returned by
// Veto_Action.Validate if the designated constraints aren't met.
type Veto_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Veto_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Veto_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Veto_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Veto_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Veto_ActionValidationError) ErrorName() string { return "Veto_ActionValidationError" }

// Error satisfies the builtin error interface
func (e Veto_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVeto_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Veto_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Veto_ActionValidationError{}

// Validate checks the field values on Veto_ActionState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Veto_ActionState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Veto_ActionState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Veto_ActionStateMultiError, or nil if none found.
func (m *Veto_ActionState) ValidateAll() error {
	return m.validate(true)
}

func (m *Veto_ActionState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Veto_ActionStateValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Veto_ActionStateValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Veto_ActionStateValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Selection

	if len(errors) > 0 {
		return Veto_ActionStateMultiError(errors)
	}

	return nil
}

// Veto_ActionStateMultiError is an error wrapping multiple validation errors
// returned by Veto_ActionState.ValidateAll() if the designated constraints
// aren't met.
type Veto_ActionStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Veto_ActionStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Veto_ActionStateMultiError) AllErrors() []error { return m }

// Veto_ActionStateValidationError is the validation error returned by
// Veto_ActionState.Validate if the designated constraints aren't met.
type Veto_ActionStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Veto_ActionStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Veto_ActionStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Veto_ActionStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Veto_ActionStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Veto_ActionStateValidationError) ErrorName() string { return "Veto_ActionStateValidationError" }

// Error satisfies the builtin error interface
func (e Veto_ActionStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVeto_ActionState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Veto_ActionStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Veto_ActionStateValidationError{}

// Validate checks the field values on Veto_Settings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Veto_Settings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Veto_Settings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Veto_SettingsMultiError, or
// nil if none found.
func (m *Veto_Settings) ValidateAll() error {
	return m.validate(true)
}

func (m *Veto_Settings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Veto_SettingsValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Veto_SettingsValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Veto_SettingsValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Veto_SettingsMultiError(errors)
	}

	return nil
}

// Veto_SettingsMultiError is an error wrapping multiple validation errors
// returned by Veto_Settings.ValidateAll() if the designated constraints
// aren't met.
type Veto_SettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Veto_SettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Veto_SettingsMultiError) AllErrors() []error { return m }

// Veto_SettingsValidationError is the validation error returned by
// Veto_Settings.Validate if the designated constraints aren't met.
type Veto_SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Veto_SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Veto_SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Veto_SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Veto_SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Veto_SettingsValidationError) ErrorName() string { return "Veto_SettingsValidationError" }

// Error satisfies the builtin error interface
func (e Veto_SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVeto_Settings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Veto_SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Veto_SettingsValidationError{}
