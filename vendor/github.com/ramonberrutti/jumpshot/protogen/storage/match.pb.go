// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: storage/match.proto

package storage

import (
	v1 "github.com/ramonberrutti/jumpshot/protogen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TournamentMatch
// key: <tournament_id>-<phase_id>-<match_id>
type TournamentMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id can be generated o forced.
	// when if forced, the id need to mean something to the match.
	// for example for playoff we can use: <W|L><round>M<id>
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// tournament id of this match.
	TournamentId string `protobuf:"bytes,2,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	// phase id of this match.
	// to extract each phase you need to explit by ":"
	// after a match is created, the phase_id can't be changed.
	// The worker will be responsable to create the match in the correct phase.
	// empty meeans that the match is not in any phase.
	PhaseId string `protobuf:"bytes,3,opt,name=phase_id,json=phaseId,proto3" json:"phase_id,omitempty"`
	// match id of this match.
	// to extract each match you need to explit by ":"
	// after a match is created, the match_id can't be changed.
	MatchId      string                            `protobuf:"bytes,17,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Participants []*v1.TournamentMatch_Participant `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
	Version      uint64                            `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	// synced is set when the match is synced with the tournament.
	Synced bool `protobuf:"varint,6,opt,name=synced,proto3" json:"synced,omitempty"`
	// state of the match.
	State v1.TournamentMatch_State `protobuf:"varint,7,opt,name=state,proto3,enum=common.v1.TournamentMatch_State" json:"state,omitempty"`
	// start_time is set when the match is started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time is set when the match is finished.
	EndTime  *timestamppb.Timestamp      `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Messages []*TournamentMatch_Messages `protobuf:"bytes,11,rep,name=messages,proto3" json:"messages,omitempty"`
	// winners next match ids.
	// empty mean that the match is the last match for the winners.
	// If multiple winners, the match will be assined for each winner in the winner order
	// decided by the tournament configuration.
	WinnersNextMatchIds []string `protobuf:"bytes,12,rep,name=winners_next_match_ids,json=winnersNextMatchIds,proto3" json:"winners_next_match_ids,omitempty"`
	// lossers next match ids.
	// empty mean that the match is the last match for the losers.
	// If multiple losers, the match will be assined for each loser in the loser order
	// decided by the tournament configuration.
	LosersNextMatchIds []string `protobuf:"bytes,13,rep,name=losers_next_match_ids,json=losersNextMatchIds,proto3" json:"losers_next_match_ids,omitempty"`
	// create_time is set when the match is created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_time is set when the match is updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// match configuration.
	// if empty, the match will use the tournament configuration.
	MatchConfig *MatchConfiguration `protobuf:"bytes,16,opt,name=match_config,json=matchConfig,proto3" json:"match_config,omitempty"`
	// Participants mode of the match.
	// Will be the same of the tournament configuration.
	ParticipantsMode v1.Tournament_ParticipantsMode `protobuf:"varint,18,opt,name=participants_mode,json=participantsMode,proto3,enum=common.v1.Tournament_ParticipantsMode" json:"participants_mode,omitempty"`
}

func (x *TournamentMatch) Reset() {
	*x = TournamentMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMatch) ProtoMessage() {}

func (x *TournamentMatch) ProtoReflect() protoreflect.Message {
	mi := &file_storage_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMatch.ProtoReflect.Descriptor instead.
func (*TournamentMatch) Descriptor() ([]byte, []int) {
	return file_storage_match_proto_rawDescGZIP(), []int{0}
}

func (x *TournamentMatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentMatch) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *TournamentMatch) GetPhaseId() string {
	if x != nil {
		return x.PhaseId
	}
	return ""
}

func (x *TournamentMatch) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *TournamentMatch) GetParticipants() []*v1.TournamentMatch_Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *TournamentMatch) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TournamentMatch) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

func (x *TournamentMatch) GetState() v1.TournamentMatch_State {
	if x != nil {
		return x.State
	}
	return v1.TournamentMatch_State(0)
}

func (x *TournamentMatch) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TournamentMatch) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TournamentMatch) GetMessages() []*TournamentMatch_Messages {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *TournamentMatch) GetWinnersNextMatchIds() []string {
	if x != nil {
		return x.WinnersNextMatchIds
	}
	return nil
}

func (x *TournamentMatch) GetLosersNextMatchIds() []string {
	if x != nil {
		return x.LosersNextMatchIds
	}
	return nil
}

func (x *TournamentMatch) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TournamentMatch) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *TournamentMatch) GetMatchConfig() *MatchConfiguration {
	if x != nil {
		return x.MatchConfig
	}
	return nil
}

func (x *TournamentMatch) GetParticipantsMode() v1.Tournament_ParticipantsMode {
	if x != nil {
		return x.ParticipantsMode
	}
	return v1.Tournament_ParticipantsMode(0)
}

// Team Validation.
// We need to create a script to validate players.
// Min number of player.
// Status of the players.
type TournamentMatch_Messages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// create_by.
	// In case of empty, is a system message.
	CreateBy string `protobuf:"bytes,2,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	// id of the team that was created.
	// empty mean that was created by someone without team.
	// for example and admin or system message.
	TeamBy string `protobuf:"bytes,3,opt,name=team_by,json=teamBy,proto3" json:"team_by,omitempty"`
	// message body.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TournamentMatch_Messages) Reset() {
	*x = TournamentMatch_Messages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMatch_Messages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMatch_Messages) ProtoMessage() {}

func (x *TournamentMatch_Messages) ProtoReflect() protoreflect.Message {
	mi := &file_storage_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMatch_Messages.ProtoReflect.Descriptor instead.
func (*TournamentMatch_Messages) Descriptor() ([]byte, []int) {
	return file_storage_match_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TournamentMatch_Messages) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentMatch_Messages) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TournamentMatch_Messages) GetTeamBy() string {
	if x != nil {
		return x.TeamBy
	}
	return ""
}

func (x *TournamentMatch_Messages) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_storage_match_proto protoreflect.FileDescriptor

var file_storage_match_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x07, 0x0a, 0x0f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73,
	0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x1a, 0x6a, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x09, 0x42, 0x89, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72,
	0x61, 0x6d, 0x6f, 0x6e, 0x62, 0x65, 0x72, 0x72, 0x75, 0x74, 0x74, 0x69, 0x2f, 0x6a, 0x75, 0x6d,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xca, 0x02, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0xe2, 0x02, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_match_proto_rawDescOnce sync.Once
	file_storage_match_proto_rawDescData = file_storage_match_proto_rawDesc
)

func file_storage_match_proto_rawDescGZIP() []byte {
	file_storage_match_proto_rawDescOnce.Do(func() {
		file_storage_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_match_proto_rawDescData)
	})
	return file_storage_match_proto_rawDescData
}

var file_storage_match_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_storage_match_proto_goTypes = []interface{}{
	(*TournamentMatch)(nil),                // 0: storage.TournamentMatch
	(*TournamentMatch_Messages)(nil),       // 1: storage.TournamentMatch.Messages
	(*v1.TournamentMatch_Participant)(nil), // 2: common.v1.TournamentMatch.Participant
	(v1.TournamentMatch_State)(0),          // 3: common.v1.TournamentMatch.State
	(*timestamppb.Timestamp)(nil),          // 4: google.protobuf.Timestamp
	(*MatchConfiguration)(nil),             // 5: storage.MatchConfiguration
	(v1.Tournament_ParticipantsMode)(0),    // 6: common.v1.Tournament.ParticipantsMode
}
var file_storage_match_proto_depIdxs = []int32{
	2, // 0: storage.TournamentMatch.participants:type_name -> common.v1.TournamentMatch.Participant
	3, // 1: storage.TournamentMatch.state:type_name -> common.v1.TournamentMatch.State
	4, // 2: storage.TournamentMatch.start_time:type_name -> google.protobuf.Timestamp
	4, // 3: storage.TournamentMatch.end_time:type_name -> google.protobuf.Timestamp
	1, // 4: storage.TournamentMatch.messages:type_name -> storage.TournamentMatch.Messages
	4, // 5: storage.TournamentMatch.create_time:type_name -> google.protobuf.Timestamp
	4, // 6: storage.TournamentMatch.update_time:type_name -> google.protobuf.Timestamp
	5, // 7: storage.TournamentMatch.match_config:type_name -> storage.MatchConfiguration
	6, // 8: storage.TournamentMatch.participants_mode:type_name -> common.v1.Tournament.ParticipantsMode
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_storage_match_proto_init() }
func file_storage_match_proto_init() {
	if File_storage_match_proto != nil {
		return
	}
	file_storage_tournament_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMatch_Messages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_storage_match_proto_goTypes,
		DependencyIndexes: file_storage_match_proto_depIdxs,
		MessageInfos:      file_storage_match_proto_msgTypes,
	}.Build()
	File_storage_match_proto = out.File
	file_storage_match_proto_rawDesc = nil
	file_storage_match_proto_goTypes = nil
	file_storage_match_proto_depIdxs = nil
}
