// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage/tournament.proto

package storage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "github.com/ramonberrutti/jumpshot/protogen/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.Tournament_ParticipantsMode(0)
)

// Validate checks the field values on Tournament with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tournament) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TournamentMultiError, or
// nil if none found.
func (m *Tournament) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TournamentValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TournamentValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TournamentValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TournamentValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TournamentValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TournamentValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for ParticipantsMode

	for idx, item := range m.GetPhases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TournamentValidationError{
						field:  fmt.Sprintf("Phases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TournamentValidationError{
						field:  fmt.Sprintf("Phases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TournamentValidationError{
					field:  fmt.Sprintf("Phases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TournamentValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TournamentValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TournamentValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAdmins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TournamentValidationError{
						field:  fmt.Sprintf("Admins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TournamentValidationError{
						field:  fmt.Sprintf("Admins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TournamentValidationError{
					field:  fmt.Sprintf("Admins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedBy

	// no validation rules for State

	// no validation rules for Game

	if all {
		switch v := interface{}(m.GetMatchConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TournamentValidationError{
					field:  "MatchConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TournamentValidationError{
					field:  "MatchConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatchConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TournamentValidationError{
				field:  "MatchConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Participants.(type) {
	case *Tournament_Teams:
		if v == nil {
			err := TournamentValidationError{
				field:  "Participants",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTeams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TournamentValidationError{
						field:  "Teams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TournamentValidationError{
						field:  "Teams",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTeams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TournamentValidationError{
					field:  "Teams",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Tournament_Players:
		if v == nil {
			err := TournamentValidationError{
				field:  "Participants",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPlayers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TournamentValidationError{
						field:  "Players",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TournamentValidationError{
						field:  "Players",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPlayers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TournamentValidationError{
					field:  "Players",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TournamentMultiError(errors)
	}

	return nil
}

// TournamentMultiError is an error wrapping multiple validation errors
// returned by Tournament.ValidateAll() if the designated constraints aren't met.
type TournamentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TournamentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TournamentMultiError) AllErrors() []error { return m }

// TournamentValidationError is the validation error returned by
// Tournament.Validate if the designated constraints aren't met.
type TournamentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TournamentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TournamentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TournamentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TournamentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TournamentValidationError) ErrorName() string { return "TournamentValidationError" }

// Error satisfies the builtin error interface
func (e TournamentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TournamentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TournamentValidationError{}

// Validate checks the field values on MatchConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MatchConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MatchConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MatchConfigurationMultiError, or nil if none found.
func (m *MatchConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *MatchConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSetup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MatchConfigurationValidationError{
					field:  "Setup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MatchConfigurationValidationError{
					field:  "Setup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MatchConfigurationValidationError{
				field:  "Setup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCancel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MatchConfigurationValidationError{
					field:  "Cancel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MatchConfigurationValidationError{
					field:  "Cancel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCancel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MatchConfigurationValidationError{
				field:  "Cancel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSetupResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MatchConfigurationValidationError{
						field:  fmt.Sprintf("SetupResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MatchConfigurationValidationError{
						field:  fmt.Sprintf("SetupResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MatchConfigurationValidationError{
					field:  fmt.Sprintf("SetupResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MatchConfigurationMultiError(errors)
	}

	return nil
}

// MatchConfigurationMultiError is an error wrapping multiple validation errors
// returned by MatchConfiguration.ValidateAll() if the designated constraints
// aren't met.
type MatchConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatchConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatchConfigurationMultiError) AllErrors() []error { return m }

// MatchConfigurationValidationError is the validation error returned by
// MatchConfiguration.Validate if the designated constraints aren't met.
type MatchConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchConfigurationValidationError) ErrorName() string {
	return "MatchConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e MatchConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchConfigurationValidationError{}

// Validate checks the field values on TournamentParticipantTeam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TournamentParticipantTeam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TournamentParticipantTeam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TournamentParticipantTeamMultiError, or nil if none found.
func (m *TournamentParticipantTeam) ValidateAll() error {
	return m.validate(true)
}

func (m *TournamentParticipantTeam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetTournaments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TournamentParticipantTeamValidationError{
						field:  fmt.Sprintf("Tournaments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TournamentParticipantTeamValidationError{
						field:  fmt.Sprintf("Tournaments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TournamentParticipantTeamValidationError{
					field:  fmt.Sprintf("Tournaments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TournamentParticipantTeamValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TournamentParticipantTeamValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TournamentParticipantTeamValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TournamentParticipantTeamMultiError(errors)
	}

	return nil
}

// TournamentParticipantTeamMultiError is an error wrapping multiple validation
// errors returned by TournamentParticipantTeam.ValidateAll() if the
// designated constraints aren't met.
type TournamentParticipantTeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TournamentParticipantTeamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TournamentParticipantTeamMultiError) AllErrors() []error { return m }

// TournamentParticipantTeamValidationError is the validation error returned by
// TournamentParticipantTeam.Validate if the designated constraints aren't met.
type TournamentParticipantTeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TournamentParticipantTeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TournamentParticipantTeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TournamentParticipantTeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TournamentParticipantTeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TournamentParticipantTeamValidationError) ErrorName() string {
	return "TournamentParticipantTeamValidationError"
}

// Error satisfies the builtin error interface
func (e TournamentParticipantTeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournamentParticipantTeam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TournamentParticipantTeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TournamentParticipantTeamValidationError{}

// Validate checks the field values on TournamentParticipantPlayer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TournamentParticipantPlayer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TournamentParticipantPlayer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TournamentParticipantPlayerMultiError, or nil if none found.
func (m *TournamentParticipantPlayer) ValidateAll() error {
	return m.validate(true)
}

func (m *TournamentParticipantPlayer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetTournaments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TournamentParticipantPlayerValidationError{
						field:  fmt.Sprintf("Tournaments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TournamentParticipantPlayerValidationError{
						field:  fmt.Sprintf("Tournaments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TournamentParticipantPlayerValidationError{
					field:  fmt.Sprintf("Tournaments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TournamentParticipantPlayerValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TournamentParticipantPlayerValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TournamentParticipantPlayerValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TournamentParticipantPlayerMultiError(errors)
	}

	return nil
}

// TournamentParticipantPlayerMultiError is an error wrapping multiple
// validation errors returned by TournamentParticipantPlayer.ValidateAll() if
// the designated constraints aren't met.
type TournamentParticipantPlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TournamentParticipantPlayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TournamentParticipantPlayerMultiError) AllErrors() []error { return m }

// TournamentParticipantPlayerValidationError is the validation error returned
// by TournamentParticipantPlayer.Validate if the designated constraints
// aren't met.
type TournamentParticipantPlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TournamentParticipantPlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TournamentParticipantPlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TournamentParticipantPlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TournamentParticipantPlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TournamentParticipantPlayerValidationError) ErrorName() string {
	return "TournamentParticipantPlayerValidationError"
}

// Error satisfies the builtin error interface
func (e TournamentParticipantPlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournamentParticipantPlayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TournamentParticipantPlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TournamentParticipantPlayerValidationError{}

// Validate checks the field values on Tournament_Admin with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Tournament_Admin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tournament_Admin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Tournament_AdminMultiError, or nil if none found.
func (m *Tournament_Admin) ValidateAll() error {
	return m.validate(true)
}

func (m *Tournament_Admin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return Tournament_AdminMultiError(errors)
	}

	return nil
}

// Tournament_AdminMultiError is an error wrapping multiple validation errors
// returned by Tournament_Admin.ValidateAll() if the designated constraints
// aren't met.
type Tournament_AdminMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tournament_AdminMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tournament_AdminMultiError) AllErrors() []error { return m }

// Tournament_AdminValidationError is the validation error returned by
// Tournament_Admin.Validate if the designated constraints aren't met.
type Tournament_AdminValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tournament_AdminValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tournament_AdminValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tournament_AdminValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tournament_AdminValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tournament_AdminValidationError) ErrorName() string { return "Tournament_AdminValidationError" }

// Error satisfies the builtin error interface
func (e Tournament_AdminValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournament_Admin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tournament_AdminValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tournament_AdminValidationError{}

// Validate checks the field values on TournamentParticipantTeam_Tournament
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TournamentParticipantTeam_Tournament) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TournamentParticipantTeam_Tournament
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TournamentParticipantTeam_TournamentMultiError, or nil if none found.
func (m *TournamentParticipantTeam_Tournament) ValidateAll() error {
	return m.validate(true)
}

func (m *TournamentParticipantTeam_Tournament) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TournamentParticipantTeam_TournamentMultiError(errors)
	}

	return nil
}

// TournamentParticipantTeam_TournamentMultiError is an error wrapping multiple
// validation errors returned by
// TournamentParticipantTeam_Tournament.ValidateAll() if the designated
// constraints aren't met.
type TournamentParticipantTeam_TournamentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TournamentParticipantTeam_TournamentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TournamentParticipantTeam_TournamentMultiError) AllErrors() []error { return m }

// TournamentParticipantTeam_TournamentValidationError is the validation error
// returned by TournamentParticipantTeam_Tournament.Validate if the designated
// constraints aren't met.
type TournamentParticipantTeam_TournamentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TournamentParticipantTeam_TournamentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TournamentParticipantTeam_TournamentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TournamentParticipantTeam_TournamentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TournamentParticipantTeam_TournamentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TournamentParticipantTeam_TournamentValidationError) ErrorName() string {
	return "TournamentParticipantTeam_TournamentValidationError"
}

// Error satisfies the builtin error interface
func (e TournamentParticipantTeam_TournamentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournamentParticipantTeam_Tournament.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TournamentParticipantTeam_TournamentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TournamentParticipantTeam_TournamentValidationError{}

// Validate checks the field values on TournamentParticipantPlayer_Tournament
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TournamentParticipantPlayer_Tournament) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TournamentParticipantPlayer_Tournament with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TournamentParticipantPlayer_TournamentMultiError, or nil if none found.
func (m *TournamentParticipantPlayer_Tournament) ValidateAll() error {
	return m.validate(true)
}

func (m *TournamentParticipantPlayer_Tournament) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TournamentParticipantPlayer_TournamentMultiError(errors)
	}

	return nil
}

// TournamentParticipantPlayer_TournamentMultiError is an error wrapping
// multiple validation errors returned by
// TournamentParticipantPlayer_Tournament.ValidateAll() if the designated
// constraints aren't met.
type TournamentParticipantPlayer_TournamentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TournamentParticipantPlayer_TournamentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TournamentParticipantPlayer_TournamentMultiError) AllErrors() []error { return m }

// TournamentParticipantPlayer_TournamentValidationError is the validation
// error returned by TournamentParticipantPlayer_Tournament.Validate if the
// designated constraints aren't met.
type TournamentParticipantPlayer_TournamentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TournamentParticipantPlayer_TournamentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TournamentParticipantPlayer_TournamentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TournamentParticipantPlayer_TournamentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TournamentParticipantPlayer_TournamentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TournamentParticipantPlayer_TournamentValidationError) ErrorName() string {
	return "TournamentParticipantPlayer_TournamentValidationError"
}

// Error satisfies the builtin error interface
func (e TournamentParticipantPlayer_TournamentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTournamentParticipantPlayer_Tournament.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TournamentParticipantPlayer_TournamentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TournamentParticipantPlayer_TournamentValidationError{}
