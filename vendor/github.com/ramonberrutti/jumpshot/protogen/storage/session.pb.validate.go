// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage/session.proto

package storage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Session) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SessionMultiError, or nil if none found.
func (m *Session) ValidateAll() error {
	return m.validate(true)
}

func (m *Session) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for ExtrapolateId

	if all {
		switch v := interface{}(m.GetExpireTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionValidationError{
				field:  "ExpireTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetMetadata()))
		i := 0
		for key := range m.GetMetadata() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMetadata()[key]
			_ = val

			// no validation rules for Metadata[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SessionValidationError{
							field:  fmt.Sprintf("Metadata[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SessionValidationError{
							field:  fmt.Sprintf("Metadata[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SessionValidationError{
						field:  fmt.Sprintf("Metadata[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	switch v := m.Method.(type) {
	case *Session_User:
		if v == nil {
			err := SessionValidationError{
				field:  "Method",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Session_Client:
		if v == nil {
			err := SessionValidationError{
				field:  "Method",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetClient()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "Client",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "Client",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	switch v := m.Impersonate.(type) {
	case *Session_AsUser:
		if v == nil {
			err := SessionValidationError{
				field:  "Impersonate",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAsUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "AsUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "AsUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAsUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionValidationError{
					field:  "AsUser",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Session_AsClient:
		if v == nil {
			err := SessionValidationError{
				field:  "Impersonate",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAsClient()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "AsClient",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SessionValidationError{
						field:  "AsClient",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAsClient()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionValidationError{
					field:  "AsClient",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SessionMultiError(errors)
	}

	return nil
}

// SessionMultiError is an error wrapping multiple validation errors returned
// by Session.ValidateAll() if the designated constraints aren't met.
type SessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionMultiError) AllErrors() []error { return m }

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on SessionExtrapolate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionExtrapolate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionExtrapolate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionExtrapolateMultiError, or nil if none found.
func (m *SessionExtrapolate) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionExtrapolate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SessionId

	if len(errors) > 0 {
		return SessionExtrapolateMultiError(errors)
	}

	return nil
}

// SessionExtrapolateMultiError is an error wrapping multiple validation errors
// returned by SessionExtrapolate.ValidateAll() if the designated constraints
// aren't met.
type SessionExtrapolateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionExtrapolateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionExtrapolateMultiError) AllErrors() []error { return m }

// SessionExtrapolateValidationError is the validation error returned by
// SessionExtrapolate.Validate if the designated constraints aren't met.
type SessionExtrapolateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionExtrapolateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionExtrapolateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionExtrapolateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionExtrapolateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionExtrapolateValidationError) ErrorName() string {
	return "SessionExtrapolateValidationError"
}

// Error satisfies the builtin error interface
func (e SessionExtrapolateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionExtrapolate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionExtrapolateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionExtrapolateValidationError{}

// Validate checks the field values on Session_MethodUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Session_MethodUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Session_MethodUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Session_MethodUserMultiError, or nil if none found.
func (m *Session_MethodUser) ValidateAll() error {
	return m.validate(true)
}

func (m *Session_MethodUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return Session_MethodUserMultiError(errors)
	}

	return nil
}

// Session_MethodUserMultiError is an error wrapping multiple validation errors
// returned by Session_MethodUser.ValidateAll() if the designated constraints
// aren't met.
type Session_MethodUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Session_MethodUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Session_MethodUserMultiError) AllErrors() []error { return m }

// Session_MethodUserValidationError is the validation error returned by
// Session_MethodUser.Validate if the designated constraints aren't met.
type Session_MethodUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Session_MethodUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Session_MethodUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Session_MethodUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Session_MethodUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Session_MethodUserValidationError) ErrorName() string {
	return "Session_MethodUserValidationError"
}

// Error satisfies the builtin error interface
func (e Session_MethodUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession_MethodUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Session_MethodUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Session_MethodUserValidationError{}

// Validate checks the field values on Session_MethodClient with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Session_MethodClient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Session_MethodClient with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Session_MethodClientMultiError, or nil if none found.
func (m *Session_MethodClient) ValidateAll() error {
	return m.validate(true)
}

func (m *Session_MethodClient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return Session_MethodClientMultiError(errors)
	}

	return nil
}

// Session_MethodClientMultiError is an error wrapping multiple validation
// errors returned by Session_MethodClient.ValidateAll() if the designated
// constraints aren't met.
type Session_MethodClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Session_MethodClientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Session_MethodClientMultiError) AllErrors() []error { return m }

// Session_MethodClientValidationError is the validation error returned by
// Session_MethodClient.Validate if the designated constraints aren't met.
type Session_MethodClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Session_MethodClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Session_MethodClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Session_MethodClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Session_MethodClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Session_MethodClientValidationError) ErrorName() string {
	return "Session_MethodClientValidationError"
}

// Error satisfies the builtin error interface
func (e Session_MethodClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession_MethodClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Session_MethodClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Session_MethodClientValidationError{}
