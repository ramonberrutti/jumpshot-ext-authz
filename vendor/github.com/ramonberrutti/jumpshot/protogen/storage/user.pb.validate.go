// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: storage/user.proto

package storage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Password",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	// no validation rules for Bot

	// no validation rules for Validated

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetInternalMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "InternalMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "InternalMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInternalMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "InternalMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserEmail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserEmail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEmail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserEmailMultiError, or nil
// if none found.
func (m *UserEmail) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEmail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	if len(errors) > 0 {
		return UserEmailMultiError(errors)
	}

	return nil
}

// UserEmailMultiError is an error wrapping multiple validation errors returned
// by UserEmail.ValidateAll() if the designated constraints aren't met.
type UserEmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEmailMultiError) AllErrors() []error { return m }

// UserEmailValidationError is the validation error returned by
// UserEmail.Validate if the designated constraints aren't met.
type UserEmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEmailValidationError) ErrorName() string { return "UserEmailValidationError" }

// Error satisfies the builtin error interface
func (e UserEmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEmailValidationError{}

// Validate checks the field values on UserName with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserNameMultiError, or nil
// if none found.
func (m *UserName) ValidateAll() error {
	return m.validate(true)
}

func (m *UserName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return UserNameMultiError(errors)
	}

	return nil
}

// UserNameMultiError is an error wrapping multiple validation errors returned
// by UserName.ValidateAll() if the designated constraints aren't met.
type UserNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserNameMultiError) AllErrors() []error { return m }

// UserNameValidationError is the validation error returned by
// UserName.Validate if the designated constraints aren't met.
type UserNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserNameValidationError) ErrorName() string { return "UserNameValidationError" }

// Error satisfies the builtin error interface
func (e UserNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserNameValidationError{}

// Validate checks the field values on UserProvider with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProvider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProviderMultiError, or
// nil if none found.
func (m *UserProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Provider

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProviderValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProviderValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProviderValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserProviderValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserProviderValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserProviderValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserProviderMultiError(errors)
	}

	return nil
}

// UserProviderMultiError is an error wrapping multiple validation errors
// returned by UserProvider.ValidateAll() if the designated constraints aren't met.
type UserProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProviderMultiError) AllErrors() []error { return m }

// UserProviderValidationError is the validation error returned by
// UserProvider.Validate if the designated constraints aren't met.
type UserProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProviderValidationError) ErrorName() string { return "UserProviderValidationError" }

// Error satisfies the builtin error interface
func (e UserProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProviderValidationError{}

// Validate checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRequestMultiError, or nil if none found.
func (m *UserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Bot

	if len(errors) > 0 {
		return UserRegisterRequestMultiError(errors)
	}

	return nil
}

// UserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by UserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRequestMultiError) AllErrors() []error { return m }

// UserRegisterRequestValidationError is the validation error returned by
// UserRegisterRequest.Validate if the designated constraints aren't met.
type UserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRequestValidationError) ErrorName() string {
	return "UserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRequestValidationError{}

// Validate checks the field values on User_Password with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *User_Password) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_Password with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in User_PasswordMultiError, or
// nil if none found.
func (m *User_Password) ValidateAll() error {
	return m.validate(true)
}

func (m *User_Password) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_PasswordValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_PasswordValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_PasswordValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWebauthnCredentials() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, User_PasswordValidationError{
						field:  fmt.Sprintf("WebauthnCredentials[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, User_PasswordValidationError{
						field:  fmt.Sprintf("WebauthnCredentials[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return User_PasswordValidationError{
					field:  fmt.Sprintf("WebauthnCredentials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ValidateToken

	if len(errors) > 0 {
		return User_PasswordMultiError(errors)
	}

	return nil
}

// User_PasswordMultiError is an error wrapping multiple validation errors
// returned by User_Password.ValidateAll() if the designated constraints
// aren't met.
type User_PasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_PasswordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_PasswordMultiError) AllErrors() []error { return m }

// User_PasswordValidationError is the validation error returned by
// User_Password.Validate if the designated constraints aren't met.
type User_PasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_PasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_PasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_PasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_PasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_PasswordValidationError) ErrorName() string { return "User_PasswordValidationError" }

// Error satisfies the builtin error interface
func (e User_PasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_Password.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_PasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_PasswordValidationError{}

// Validate checks the field values on User_Provider with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *User_Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_Provider with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in User_ProviderMultiError, or
// nil if none found.
func (m *User_Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *User_Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_ProviderValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_ProviderValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_ProviderValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_ProviderValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_ProviderValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_ProviderValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return User_ProviderMultiError(errors)
	}

	return nil
}

// User_ProviderMultiError is an error wrapping multiple validation errors
// returned by User_Provider.ValidateAll() if the designated constraints
// aren't met.
type User_ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_ProviderMultiError) AllErrors() []error { return m }

// User_ProviderValidationError is the validation error returned by
// User_Provider.Validate if the designated constraints aren't met.
type User_ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_ProviderValidationError) ErrorName() string { return "User_ProviderValidationError" }

// Error satisfies the builtin error interface
func (e User_ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_ProviderValidationError{}

// Validate checks the field values on User_InternalMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *User_InternalMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_InternalMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// User_InternalMetadataMultiError, or nil if none found.
func (m *User_InternalMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *User_InternalMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastSendValidateEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_InternalMetadataValidationError{
					field:  "LastSendValidateEmail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_InternalMetadataValidationError{
					field:  "LastSendValidateEmail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSendValidateEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_InternalMetadataValidationError{
				field:  "LastSendValidateEmail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastSendResetPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_InternalMetadataValidationError{
					field:  "LastSendResetPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_InternalMetadataValidationError{
					field:  "LastSendResetPassword",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastSendResetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_InternalMetadataValidationError{
				field:  "LastSendResetPassword",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return User_InternalMetadataMultiError(errors)
	}

	return nil
}

// User_InternalMetadataMultiError is an error wrapping multiple validation
// errors returned by User_InternalMetadata.ValidateAll() if the designated
// constraints aren't met.
type User_InternalMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_InternalMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_InternalMetadataMultiError) AllErrors() []error { return m }

// User_InternalMetadataValidationError is the validation error returned by
// User_InternalMetadata.Validate if the designated constraints aren't met.
type User_InternalMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_InternalMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_InternalMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_InternalMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_InternalMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_InternalMetadataValidationError) ErrorName() string {
	return "User_InternalMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e User_InternalMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_InternalMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_InternalMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_InternalMetadataValidationError{}

// Validate checks the field values on User_Password_Credential with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *User_Password_Credential) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_Password_Credential with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// User_Password_CredentialMultiError, or nil if none found.
func (m *User_Password_Credential) ValidateAll() error {
	return m.validate(true)
}

func (m *User_Password_Credential) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PublicKey

	// no validation rules for AttestationType

	if all {
		switch v := interface{}(m.GetFlags()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_Password_CredentialValidationError{
					field:  "Flags",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_Password_CredentialValidationError{
					field:  "Flags",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlags()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_Password_CredentialValidationError{
				field:  "Flags",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuthenticator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_Password_CredentialValidationError{
					field:  "Authenticator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_Password_CredentialValidationError{
					field:  "Authenticator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthenticator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_Password_CredentialValidationError{
				field:  "Authenticator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, User_Password_CredentialValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, User_Password_CredentialValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return User_Password_CredentialValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return User_Password_CredentialMultiError(errors)
	}

	return nil
}

// User_Password_CredentialMultiError is an error wrapping multiple validation
// errors returned by User_Password_Credential.ValidateAll() if the designated
// constraints aren't met.
type User_Password_CredentialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_Password_CredentialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_Password_CredentialMultiError) AllErrors() []error { return m }

// User_Password_CredentialValidationError is the validation error returned by
// User_Password_Credential.Validate if the designated constraints aren't met.
type User_Password_CredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_Password_CredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_Password_CredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_Password_CredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_Password_CredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_Password_CredentialValidationError) ErrorName() string {
	return "User_Password_CredentialValidationError"
}

// Error satisfies the builtin error interface
func (e User_Password_CredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_Password_Credential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_Password_CredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_Password_CredentialValidationError{}

// Validate checks the field values on User_Password_Credential_Flags with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *User_Password_Credential_Flags) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User_Password_Credential_Flags with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// User_Password_Credential_FlagsMultiError, or nil if none found.
func (m *User_Password_Credential_Flags) ValidateAll() error {
	return m.validate(true)
}

func (m *User_Password_Credential_Flags) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserPresent

	// no validation rules for UserVerified

	// no validation rules for BackupEligible

	// no validation rules for BackupState

	if len(errors) > 0 {
		return User_Password_Credential_FlagsMultiError(errors)
	}

	return nil
}

// User_Password_Credential_FlagsMultiError is an error wrapping multiple
// validation errors returned by User_Password_Credential_Flags.ValidateAll()
// if the designated constraints aren't met.
type User_Password_Credential_FlagsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_Password_Credential_FlagsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_Password_Credential_FlagsMultiError) AllErrors() []error { return m }

// User_Password_Credential_FlagsValidationError is the validation error
// returned by User_Password_Credential_Flags.Validate if the designated
// constraints aren't met.
type User_Password_Credential_FlagsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_Password_Credential_FlagsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_Password_Credential_FlagsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_Password_Credential_FlagsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_Password_Credential_FlagsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_Password_Credential_FlagsValidationError) ErrorName() string {
	return "User_Password_Credential_FlagsValidationError"
}

// Error satisfies the builtin error interface
func (e User_Password_Credential_FlagsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_Password_Credential_Flags.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_Password_Credential_FlagsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_Password_Credential_FlagsValidationError{}

// Validate checks the field values on User_Password_Credential_Authenticator
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *User_Password_Credential_Authenticator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// User_Password_Credential_Authenticator with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// User_Password_Credential_AuthenticatorMultiError, or nil if none found.
func (m *User_Password_Credential_Authenticator) ValidateAll() error {
	return m.validate(true)
}

func (m *User_Password_Credential_Authenticator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Aaguid

	// no validation rules for SignCount

	// no validation rules for CloneWarning

	// no validation rules for Attachment

	if len(errors) > 0 {
		return User_Password_Credential_AuthenticatorMultiError(errors)
	}

	return nil
}

// User_Password_Credential_AuthenticatorMultiError is an error wrapping
// multiple validation errors returned by
// User_Password_Credential_Authenticator.ValidateAll() if the designated
// constraints aren't met.
type User_Password_Credential_AuthenticatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m User_Password_Credential_AuthenticatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m User_Password_Credential_AuthenticatorMultiError) AllErrors() []error { return m }

// User_Password_Credential_AuthenticatorValidationError is the validation
// error returned by User_Password_Credential_Authenticator.Validate if the
// designated constraints aren't met.
type User_Password_Credential_AuthenticatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e User_Password_Credential_AuthenticatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e User_Password_Credential_AuthenticatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e User_Password_Credential_AuthenticatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e User_Password_Credential_AuthenticatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e User_Password_Credential_AuthenticatorValidationError) ErrorName() string {
	return "User_Password_Credential_AuthenticatorValidationError"
}

// Error satisfies the builtin error interface
func (e User_Password_Credential_AuthenticatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser_Password_Credential_Authenticator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = User_Password_Credential_AuthenticatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = User_Password_Credential_AuthenticatorValidationError{}
